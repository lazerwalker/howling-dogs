name: Build

# TODO: If the new tag stuff works, we'll still need an early script step
# That puts the correct tag number in an env var
# (which might be X.0.0, or might be user-driven)

on:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Move config to root dir
        run: mv config/* .
      
      - name: Set game configuration
        run: |
          echo "APP_NAME=$(cat ./package.json | jq -r '.name')" >> $GITHUB_ENV
          echo "DISPLAY_NAME=$(cat ./package.json | jq -r '.displayName')" >> $GITHUB_ENV
          echo "DESCRIPTION=$(cat ./package.json | jq -r '.description')" >> $GITHUB_ENV
          echo "AUTHOR=$(cat ./package.json | jq -r '.author')" >> $GITHUB_ENV
          echo "VERSION=$(cat ./package.json | jq -r '.version')" >> $GITHUB_ENV
          echo "BUNDLE_ID=$(cat ./package.json | jq -r '.bundleId')" >> $GITHUB_ENV
          echo "PUBLISH_ON_WEB=$(cat ./package.json | jq -r '.publishOnWeb')" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install node deps
        run: npm install

      - name: Test for presence of Windows codesigning secrets
        id: vars
        shell: bash
        run: |
          unset HAS_WINDOWS_CREDS
          if [[ -n $CERTIFICATE_WINDOWS_PFX ]]; then HAS_WINDOWS_CREDS='true' ; fi
          echo set-output name=HAS_WINDOWS_CREDS::${HAS_WINDOWS_CREDS}
        env:
          CERTIFICATE_WINDOWS_PFX: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}

      - name: Generate icons
        run: npm run build-desktop-icons

      - name: Add MacOS certs
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if ! [[ -n $CERTIFICATE_OSX_APPLICATION && -n $CERTIFICATE_PASSWORD ]]; then exit 0 ; fi
          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          echo $CERTIFICATE_OSX_APPLICATION | base64 --decode > $CERTIFICATE_P12
          security create-keychain -p actions $KEY_CHAIN
          security default-keychain -s $KEY_CHAIN
          security unlock-keychain -p actions $KEY_CHAIN
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign;
          security set-key-partition-list -S apple-tool:,apple: -s -k actions $KEY_CHAIN
          rm -fr *.p12
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Add Windows certificate
        if: matrix.os == 'windows-latest' && steps.vars.outputs.HAS_WINDOWS_CREDS
        id: write_file
        uses: timheuer/base64-to-file@v1
        with:
          fileName: "win-certificate.pfx"
          encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
          
      - name: Build the app
        env:
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          #APPLE_PROVIDER: ${{ secrets.APPLE_PROVIDER }}
          CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
          WINDOWS_PFX_FILE: ${{ steps.write_file.outputs.filePath }}
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
        run: npx electron-forge make

      - name: Publish to GitHub Pages
        if: ${{ env.PUBLISH_ON_WEB == 'true' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./src

      # TODO: Consider pulling it out into its own TS file
      - name: Create tag if necessary
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const tag = `${context.runNumber}.0.0`
            try {
              const result = await github.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              })
              console.log("Found!")
            } catch(e) {
              // Modified from https://github.com/negz/create-tag/blob/main/src/main.ts
              try {
                  const createTag = await github.git.createTag({
                  ...context.repo,
                  tag,
                  message: `Auto-create tag '${tag}'`,
                  object: context.sha,
                  type: 'commit'
                })
                if (createTag.status !== 201) {
                  core.setFailed(`Failed to create tag object (status=${createTag.status})`)
                  return
                }

                const createRef = await github.git.createRef({
                  ...context.repo,
                  ref: `refs/tags/${tag}`,
                  sha: createTag.data.sha
                 })
                if (createRef.status !== 201) {
                  core.setFailed(`Failed to create tag ref(status = ${createRef.status})`)
                  return
                }
              } catch (e2) {
                  core.setFailed(e2.message)
              }
            }
      
      - name: Release on GitHub (Automated Tag)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('{0}.0.0', github.run_number) }}
          files: |
            out/**/*.deb
            out/**/*.dmg
            out/**/*Setup.exe
            out/**/*.rpm
            out/**/*.zip

  ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set game configuration
        run: |
          echo "APP_NAME=$(cat ./package.json | jq -r '.name')" >> $GITHUB_ENV
          echo "DISPLAY_NAME=$(cat ./package.json | jq -r '.displayName')" >> $GITHUB_ENV
          echo "DESCRIPTION=$(cat ./package.json | jq -r '.description')" >> $GITHUB_ENV
          echo "AUTHOR=$(cat ./package.json | jq -r '.author')" >> $GITHUB_ENV
          echo "VERSION=$(cat ./package.json | jq -r '.version')" >> $GITHUB_ENV
          echo "BUNDLE_ID=$(cat ./package.json | jq -r '.bundleId')" >> $GITHUB_ENV

      - name: Move config to root dir
        run: mv config/* .

      - name: Update capacitor.config.json
        run: |
          node -e "\
          const fs = require('fs');\
          const pkg = require('./capacitor.config.json');\
          pkg.appId = process.env.BUNDLE_ID;\
          pkg.appName = process.env.DISPLAY_NAME;\
          fs.writeFileSync('./capacitor.config.json', JSON.stringify(pkg,undefined,'\t'));"

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true 

      - name: Set up project
        shell: bash
        run: |
          npm install
          npx cap add ios
          npx cap sync
          npx cordova-res ios --skip-config --copy

      - name: Build iOS
        shell: bash
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          bundle exec fastlane build
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GITHUB_REPOSITORY: ${{ env.GITHUB_REPOSITORY }}
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}

          BUNDLE_ID: ${{ env.BUNDLE_ID }
          APP_NAME: ${{ env.APP_NAME }}
          BUILD_NUMBER: ${{ github.run_number }}
          VERSION: ${{ env.VERSION }}

          # Generate a new .p8 from https://appstoreconnect.apple.com/access/users, then "Keys"
          # I'm trying "App Manager" access
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }} # Raw .p8 value

      - name: Edit manifest.plist to link to the newly-generated IPA
        run: |
          /usr/libexec/PlistBuddy -c "Set :items:0:assets:0:url string $IPA_URL" ~/Desktop/test.plist
          /usr/libexec/PlistBuddy -c "Set :items:0:assets:1:url string $ICON_URL" ~/Desktop/test.plist
          /usr/libexec/PlistBuddy -c "Set :items:0:assets:2:url string $ICON_URL" ~/Desktop/test.plist
          /usr/libexec/PlistBuddy -c "Set :items:0:metadata:bundle-identifier string $BUNDLE_ID" ~/Desktop/test.plist
          /usr/libexec/PlistBuddy -c "Set :items:0:metadata:bundle-version string $VERSION" ~/Desktop/test.plist
          /usr/libexec/PlistBuddy -c "Set :items:0:metadata:title string $APP_NAME" ~/Desktop/test.plist

        env:
          IPA_URL: https://google.com 
          ICON_URL: https://github.com/lazerwalker/howling-dogs/blob/main/resources/icon.png
          BUNDLE_ID: ${{ env.BUNDLE_ID }}
          VERSION: ${{ env.VERSION }}
          APP_NAME: ${{ env.APP_NAME }}
          # TODO: do the ones already in env need to be explicitly set here or not?

      - name: Release on GitHub (Automated Tag)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('{0}.0.0', github.run_number) }}
          body: ${{ format('Registered iOS testers can download this build by tapping [here](https://github.com/{0}/releases/download/{1}/manifest.plist) from their approved device', github.repository, github.run_number) }}
          files: |
            *.ipa
            manifest.plist